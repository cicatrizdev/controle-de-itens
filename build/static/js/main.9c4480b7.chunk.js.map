{"version":3,"sources":["Item.jsx","ItemList.jsx","App.js","serviceWorker.js","index.js"],"names":["Item","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isEdit","editItem","bind","assertThisInitialized","editItemSubmit","deleteItem","id","item","setState","prevState","nameInput","value","peopleInput","dateInput","_this2","_this$props$item","name","people","date","react_default","a","createElement","className","key","index","ref","defaultValue","type","onClick","Component","ItemList","trItem","itemList","map","Item_Item","localStorage","getItem","setItem","JSON","stringify","App","addNewItem","parse","concat","toConsumableArray","Math","max","apply","o","window","confirm","filteredItemList","filter","x","itemListCopy","ItemList_ItemList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c4480b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nexport default class Item extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state ={isEdit:false}\r\n    this.editItem = this.editItem.bind(this);\r\n    this.editItemSubmit = this.editItemSubmit.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n  }\r\n  deleteItem()\r\n  {\r\n    const {id} = this.props.item;\r\nthis.props.deleteItem(id);\r\n  }\r\n  editItem()\r\n  {\r\n    this.setState((prevState,props) => ({\r\n      isEdit : !prevState.isEdit\r\n    }))\r\n  }\r\n  editItemSubmit()\r\n  {\r\n    const {id} = this.props.item;\r\n    this.setState((prevState,props) => ({\r\n      isEdit : !prevState.isEdit\r\n    }));\r\n    this.props.editItemSubmit(id,this.nameInput.value,this.peopleInput.value,this.dateInput.value);\r\n  }\r\n    render() {\r\n        const {name,people,date} = this.props.item;\r\n      return (\r\n        this.state.isEdit === true ? \r\n\r\n        <tr className=\"bg-warning\" key={this.props.index}><td><input ref={nameInput => this.nameInput = nameInput} defaultValue={name}/></td><td><input defaultValue={people} ref={peopleInput => this.peopleInput = peopleInput}/></td><td><input type=\"date\" ref={dateInput => this.dateInput = dateInput} defaultValue={date}/></td><td><i className=\"far fa-save\" onClick={this.editItemSubmit}></i></td><td><i className=\"fas fa-trash\"></i></td></tr>\r\n :\r\n        <tr key={this.props.index}><td>{name}</td><td>{people}</td><td>{date}</td><td><i className=\"far fa-edit\" onClick={this.editItem}></i></td><td><i className=\"fas fa-trash\" onClick={this.deleteItem}></i></td></tr>\r\n      );\r\n    }\r\n  }\r\n","import React, { Component } from 'react';\r\nimport Item from './Item.jsx';\r\n\r\nexport default class ItemList extends Component {\r\n    render() {\r\n        let itens = this.props.itemList;\r\n        const trItem = itens.map( (item,index) => <Item key={index} item={item} index={index} editItemSubmit={this.props.editItemSubmit} deleteItem={this.props.deleteItem}/>)\r\n      return (\r\n            <tbody>{trItem}</tbody>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\nimport './App.css';\nimport ItemList from './ItemList';\n\nconst itemList = [\n  {\n    id: 1,\n    name: 'Raspberry',\n    people: 'Meganha',\n    date: \"2019-01-02\"\n  }\n];\n\nif (localStorage.getItem(\"itens\") === null)\n  localStorage.setItem('itens', JSON.stringify(itemList));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemList: []\n    }\n    this.editItemSubmit = this.editItemSubmit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.addNewItem = this.addNewItem.bind(this);\n  }\n  componentWillMount() {\n    let itemList = JSON.parse(localStorage.getItem(\"itens\"));\n\n    this.setState((prevState, props) => (\n      {\n        itemList: itemList\n      }\n    )\n    );\n  }\n  addNewItem() {\n    this.setState((prevState, props) => ({\n\n      itemList: [...prevState.itemList, { id:Math.max(...prevState.itemList.map(function(o){return o.id})) + 1,name: '', people: '', date: '' }]\n\n    }));\n  }\n\n  deleteItem(id) {\n    let r = window.confirm(\"Confirmar devolução do item?\");\n    if (r === true) {\n      let filteredItemList = this.state.itemList.filter(x => x.id !== id);\n\n      this.setState((prevState, props) => ({\n        itemList: filteredItemList\n      }));\n      localStorage.setItem('itens', JSON.stringify(filteredItemList));\n    }\n  }\n  editItemSubmit(id, name, people, date) {\n    let itemListCopy = this.state.itemList.map((item) => {\n      if (item.id === id) {\n        item.name = name;\n        item.people = people;\n        item.date = date;\n      }\n      return item;\n    });\n    this.setState((prevState, props) => ({\n      itemList: itemListCopy\n    }));\n    localStorage.setItem('itens', JSON.stringify(itemListCopy));\n  }\n  render() {\n    return (\n\n      <div className=\"container-fluid\">\n        <div className=\"row mt-3\">\n          <div className=\"col-lg-12\">\n            <div className=\"card\">\n              <div className=\"card-header\">\n                Controle de Itens - LocalStorage\n              </div>\n              <div className=\"card-body\">\n                <table className=\"table table-hover\">\n                  <thead className=\"thead-light\"><tr><th>Item</th><th>Pessoa</th><th>Data</th><th>Editar/Salvar</th><th>Deletar Registro</th></tr></thead>\n                <ItemList deleteItem={this.deleteItem} itemList={this.state.itemList} editItemSubmit={this.editItemSubmit} />\n                </table>\n                <button className=\"btn btn-dark pull-left\" onClick={this.addNewItem}>Novo Item</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}